{"version":3,"sources":["BalanceHistory.js","App.js","index.js"],"names":["initConfigData","data","xField","yField","minColumnWidth","maxColumnWidth","BalanceHistory","useState","month","setMonth","dataForChartDaily","setDataForDailyChart","loading","PnLitem","setPnLItem","year","setYear","_config","setConfig","Ws","setWS","totalEthBalance","setTotalEthBalance","totalUSDBalance","setTotalUSDBalance","WsState","setWsState","useEffect","wss","WebSocket","window","location","host","onmessage","e","res","JSON","parse","error","notification","message","description","TotalEthBalance","TotalUSDBalance","PNLItem","onopen","nowDate","Date","_month","getFullYear","getMonth","send","stringify","Year","Month","split","tooltip","customContent","title","className","mappingData","_origin","EPnl","DPnl","onChangeDate","a","target","value","_year","style","position","width","type","onChange","filter","height","onClick","top","left","App","src","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2a0babd.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Column } from \"@ant-design/plots\";\r\nimport { notification } from \"antd\";\r\nconst initConfigData = {\r\n    data: [],\r\n    xField: 'date',\r\n    yField: 'EPnl',\r\n\r\n    minColumnWidth: 10,\r\n    maxColumnWidth: 10,\r\n};\r\n\r\nconst BalanceHistory = () => {\r\n    const [month, setMonth] = useState(\"\")\r\n    const [dataForChartDaily, setDataForDailyChart] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [PnLitem, setPnLItem] = useState(\"D\");\r\n    const [year, setYear] = useState(\"\");\r\n    const [_config, setConfig] = useState(initConfigData);\r\n    const [Ws, setWS] = useState({});\r\n    const [totalEthBalance, setTotalEthBalance] = useState(0);\r\n    const [totalUSDBalance, setTotalUSDBalance] = useState(0);\r\n    const [WsState, setWsState] = useState(false);\r\n    useEffect(() => {\r\n        let wss = new WebSocket(`ws://${window.location.host}`);\r\n        setWS(wss);\r\n        //console.log(wss)\r\n        wss.onmessage = (e) => {\r\n            let res = JSON.parse(e.data);\r\n            // console.log(res, \"res\")\r\n            if (res.data.error) {\r\n                // console.log(res.data.error);\r\n                notification.error({\r\n                    message: \"Server Error\",\r\n                    description: res.data.error\r\n                });\r\n                setDataForDailyChart([])\r\n                return;\r\n            }\r\n            else {\r\n                setDataForDailyChart(res.data.data);\r\n                setTotalEthBalance(res.data.TotalEthBalance);\r\n                setTotalUSDBalance(res.data.TotalUSDBalance);\r\n                setPnLItem(res.PNLItem);\r\n            }\r\n        }\r\n        wss.onopen = (e) => {\r\n            setWsState(true);\r\n        }\r\n\r\n\r\n        const nowDate = new Date();\r\n        const _month = nowDate.getFullYear() + \"-\" + (nowDate.getMonth() + 1);\r\n\r\n        setMonth(_month);\r\n        setYear(nowDate.getFullYear());\r\n\r\n\r\n    }, []);\r\n    useEffect(() => {\r\n        // console.log(Ws)\r\n        if (Ws && year && WsState)\r\n            Ws.send(JSON.stringify({ Year: year, Month: month.split(\"-\")[1] * 1, PNLItem: PnLitem }));\r\n\r\n    }, [PnLitem, year]);\r\n    useEffect(() => {\r\n        if (PnLitem == \"D\" && Ws && month && WsState)\r\n            Ws.send(JSON.stringify({ Year: year, Month: month.split(\"-\")[1] * 1, PNLItem: PnLitem }));\r\n\r\n    }, [month,WsState]);\r\n    useEffect(() => {\r\n        setConfig({\r\n            data: [...dataForChartDaily],\r\n            xField: 'date',\r\n            yField: 'EPnl',\r\n            tooltip: {\r\n                customContent: (title, data) => {\r\n                    if (data[0]) {\r\n                        return (<div className=\"\">\r\n                            <div className=\"pl-1 text-info\">\r\n                                *EPnL\r\n                            </div>\r\n                            <div className=\" col pl-5 rtl\">\r\n                                {data[0].mappingData._origin.EPnl}ETH\r\n                            </div>\r\n                            <div className=\"pl-1 text-success\">\r\n                                *USDPnL\r\n                            </div>\r\n                            <div className=\" col pl-5 rtl \" >\r\n                                {data[0].mappingData._origin.DPnl}USD\r\n                            </div>\r\n\r\n                        </div>)\r\n                    }\r\n                }\r\n            }\r\n\r\n        })\r\n    }, [dataForChartDaily])\r\n    const onChangeDate = async (e) => {\r\n        setMonth(e.target.value);\r\n        let _year = e.target.value.split(\"-\")[0];\r\n        setYear(_year);\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"rounded shadow p-5 bg-dark2\" style={{ position: \"relative\" }} >\r\n            <div className=\" d-flex justify-content-center\" >\r\n                <div style={{ width: \"500px\" }}>\r\n                    <h5 className=\"\">\r\n                        TOTAL AMOUNT :\r\n                        &nbsp;\r\n                        &nbsp;\r\n                        &nbsp;\r\n                        <span className=\"bg-dark\">{totalEthBalance}ETH</span>\r\n                        &nbsp;\r\n                        &nbsp;\r\n                        &nbsp;\r\n                        <span className=\"bg-dark1\">{totalUSDBalance}$</span>\r\n                    </h5>\r\n                </div>\r\n                <div className=\"pl-3\">\r\n\r\n                    <input type=\"month\" className=\" form-control\" value={month} onChange={onChangeDate} />\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\" p-5\" >\r\n                <div className=\"p-5\" style={{ filter: loading ? \"blur(2px)\" : \"blur(0px)\", height: \"40vh\" }} >\r\n                    <div className=\"d-flex justify-content-end\">\r\n\r\n                        <div className=\"btn-group\">\r\n                            <button onClick={e => { setPnLItem(\"D\") }} className={PnLitem == \"D\" ? \" btn btn-sm btn-dark\" : \"btn btn-sm btn-secondary\"}> Daily</button>\r\n                            <button onClick={e => { setPnLItem(\"M\") }} className={PnLitem == \"M\" ? \"btn btn-sm btn-dark\" : \"btn btn-sm btn-secondary\"}> Monthly</button>\r\n                            <button onClick={e => { setPnLItem(\"Y\") }} className={PnLitem == \"Y\" ? \"btn btn-sm btn-dark\" : \"btn btn-sm btn-secondary\"}> Yearly</button>\r\n                        </div>\r\n                    </div>\r\n                    <Column {..._config} />\r\n                </div>\r\n            </div>\r\n\r\n\r\n            {loading && (<span className=\"spinner-border  text-white\" style={{ height: \"5em\", width: \"5em\", position: \"relative\", top: \"-200px\", left: \"50%\" }}></span>)}\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default BalanceHistory;","\r\nimport 'antd/dist/antd.css';\r\nimport './css/App.css';\r\n\r\nimport BalanceHistory from \"./BalanceHistory\"\r\nfunction App() {\r\n\r\n\treturn (\r\n\t<div className=\"page-layout\">\r\n\t\t<div className=' bg-dark2 p-1 pt-3  pl-4 shadow d-flex '>\r\n\t\t\t<h4 className='center'><img src='/logo192.png' width={70} ></img>PNL History</h4>\r\n\t\t</div>\r\n\t\t<main>\r\n\t\t\t<div className=\"container\">\r\n\t\t\t<BalanceHistory/>\r\n\t\t\t</div>\r\n\t\t</main>\r\n\t</div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    \r\n      <App />\r\n    \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}